
import java.util.List;
import java.util.ArrayList;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;
import java.io.IOException;
import java.io.OutputStream;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

public class InstructorReportServlet extends HttpServlet {

	private Connection conn;
	private String pdfHeaderText;
	private String pdfFooterText;

	class PdfHeaderFooter extends PdfPageEventHelper {

		private PdfTemplate totalPages;
		private Font footerFont;
		private Font headerFont;
		private String loggedInUser;
		private String headerText;
		private String footerText;

		public PdfHeaderFooter(String loggedInUser, String headerText, String footerText) {
			this.loggedInUser = loggedInUser;
			this.headerText = headerText;
			this.footerText = footerText;
			this.footerFont = FontFactory.getFont(FontFactory.COURIER_OBLIQUE, 8);
			this.headerFont = FontFactory.getFont(FontFactory.COURIER_BOLD, 8);
		}

		@Override
		public void onOpenDocument(PdfWriter writer, Document document) {
			totalPages = writer.getDirectContent().createTemplate(30, 16);
		}

		@Override
		public void onEndPage(PdfWriter writer, Document document) {
			// Current date and time
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String dateTime = dateFormat.format(new Date());

			// HEADER - activelearning.ph
			ColumnText.showTextAligned(
					writer.getDirectContent(),
					Element.ALIGN_LEFT,
					new Phrase(headerText, headerFont),
					document.leftMargin(),
					document.top() + 20,
					0
			);

			// FOOTER - Sensitive information message
			ColumnText.showTextAligned(
					writer.getDirectContent(),
					Element.ALIGN_CENTER,
					new Phrase(footerText, footerFont),
					(document.right() - document.left()) / 2 + document.leftMargin(),
					document.bottomMargin() - 10,
					0
			);

			// Original footer content (date, user, page numbers)
			ColumnText.showTextAligned(
					writer.getDirectContent(),
					Element.ALIGN_LEFT,
					new Phrase(dateTime + "  ||  Generated by: " + loggedInUser, footerFont),
					document.leftMargin(),
					document.bottomMargin() - 25,
					0
			);

			ColumnText.showTextAligned(
					writer.getDirectContent(),
					Element.ALIGN_RIGHT,
					new Phrase("Page " + writer.getPageNumber() + " of ", footerFont),
					document.right() - 10,
					document.bottomMargin() - 25,
					0
			);

			writer.getDirectContent().addTemplate(
					totalPages,
					document.right() - 5,
					document.bottomMargin() - 25
			);
		}

		@Override
		public void onCloseDocument(PdfWriter writer, Document document) {
			ColumnText.showTextAligned(
					totalPages,
					Element.ALIGN_LEFT,
					new Phrase(String.valueOf(writer.getPageNumber()), footerFont),
					0, 0, 0
			);
		}
	}

	@Override
	public void init(ServletConfig cfg) throws ServletException {
		super.init(cfg);
	}

	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		HttpSession session = request.getSession(false);
		if (session == null || session.getAttribute("user") == null) {
			response.sendError(HttpServletResponse.SC_FORBIDDEN);
			return;
		}

		String loggedInUser = (String) session.getAttribute("user");

		try {
			// Get course name from database
			String courseName = "COURSELIST"; // default value

			DatabaseConnector db = new DatabaseConnector();
			ServletConfig cfg = getServletConfig();
			db.init(
					cfg.getInitParameter("jdbcClassName"),
					cfg.getInitParameter("jdbcDriverURL"),
					cfg.getInitParameter("dbHostName"),
					cfg.getInitParameter("dbPort"),
					cfg.getInitParameter("dbName"),
					cfg.getInitParameter("dbUsername"),
					cfg.getInitParameter("dbPassword")
			);

			ResultSet rs = db.runQuery("SELECT COURSE_NAME FROM COURSE_LEARNERS LIMIT 1");
			if (rs.next()) {
				courseName = rs.getString("COURSE_NAME");
				courseName = courseName.replaceAll("[^a-zA-Z0-9]", "_");
			}

			// Generate timestamp for filename
			SimpleDateFormat fileDateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
			String timestamp = fileDateFormat.format(new Date());
			String filename = courseName + "_" + timestamp + ".pdf";

			response.setContentType("application/pdf");
			response.setHeader("Content-Disposition", "inline; filename=" + filename);

			// PDF Creation - Landscape
			Document doc = new Document(PageSize.LETTER.rotate());
			OutputStream out = response.getOutputStream();
			PdfWriter writer = PdfWriter.getInstance(doc, out);

			// Set header and footer with text from web.xml
			writer.setPageEvent(new PdfHeaderFooter(loggedInUser, pdfHeaderText, pdfFooterText));

			// --- actual content start
			doc.open();

			// Title/header
			Font titleFont = FontFactory.getFont(FontFactory.COURIER_BOLD, 18);
			Paragraph docTitle = new Paragraph("ACCOUNT DATABASE", titleFont);
			docTitle.setAlignment(Element.ALIGN_CENTER);
			docTitle.setSpacingAfter(20f);
			doc.add(docTitle);

			// Rest of your existing PDF generation code...
			// [Keep all your existing table and data generation code here]
			
			// Body
			float[] relativeColWidths = {5F, 1};
			PdfPTable bodyTable = new PdfPTable(relativeColWidths);

			bodyTable.addCell("Username");
			bodyTable.addCell("Role");
			
			ResultSet results = db.runQuery("SELECT USERNAME,ROLE FROM UsersDB");
			while (results.next()) {
				String username = results.getString("USERNAME");
				bodyTable.addCell(new Phrase(username + (username.equals(loggedInUser) ? "* (current)" : "")));
				bodyTable.addCell(new Phrase(results.getString("ROLE")));
			}

			doc.close();

		} catch (DocumentException | SQLException ex) {
			throw new ServletException("Error generating PDF report", ex);
		}
	}

	@Override
	public void destroy() {
		try {
			if (conn != null) {
				conn.close();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
}
