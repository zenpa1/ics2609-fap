
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfPageEventHelper;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class DownloadScheduleServlet extends HttpServlet {

	class PdfHeaderFooter extends PdfPageEventHelper {

		private PdfTemplate totalPages;
		private Font footerFont;
		private Font headerFont;
		private String loggedInUser;
		private String headerText;
		private String footerText;

		public PdfHeaderFooter(String loggedInUser, String headerText, String footerText) {
			this.loggedInUser = loggedInUser;
			this.headerText = headerText;
			this.footerText = footerText;
			this.footerFont = FontFactory.getFont(FontFactory.COURIER_OBLIQUE, 8);
			this.headerFont = FontFactory.getFont(FontFactory.COURIER_BOLD, 8);
		}

		@Override
		public void onOpenDocument(PdfWriter writer, Document document) {
			totalPages = writer.getDirectContent().createTemplate(30, 16);
		}

		@Override
		public void onEndPage(PdfWriter writer, Document document) {
			// Current date and time
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String dateTime = dateFormat.format(new Date());

			// HEADER - activelearning.ph
			ColumnText.showTextAligned(
					writer.getDirectContent(),
					Element.ALIGN_LEFT,
					new Phrase(headerText, headerFont),
					document.leftMargin(),
					document.top() + 20,
					0
			);

			// FOOTER - Sensitive information message
			ColumnText.showTextAligned(
					writer.getDirectContent(),
					Element.ALIGN_CENTER,
					new Phrase(footerText, footerFont),
					(document.right() - document.left()) / 2 + document.leftMargin(),
					document.bottomMargin() - 10,
					0
			);

			// Original footer content (date, user, page numbers)
			ColumnText.showTextAligned(
					writer.getDirectContent(),
					Element.ALIGN_LEFT,
					new Phrase(dateTime + "  ||  Generated by: " + loggedInUser, footerFont),
					document.leftMargin(),
					document.bottomMargin() - 25,
					0
			);

			ColumnText.showTextAligned(
					writer.getDirectContent(),
					Element.ALIGN_RIGHT,
					new Phrase("Page " + writer.getPageNumber() + " of ", footerFont),
					document.right() - 10,
					document.bottomMargin() - 25,
					0
			);

			writer.getDirectContent().addTemplate(
					totalPages,
					document.right() - 5,
					document.bottomMargin() - 25
			);
		}

		@Override
		public void onCloseDocument(PdfWriter writer, Document document) {
			ColumnText.showTextAligned(
					totalPages,
					Element.ALIGN_LEFT,
					new Phrase(String.valueOf(writer.getPageNumber()), footerFont),
					0, 0, 0
			);
		}
	}

	/**
	 * Processes requests for both HTTP <code>GET</code> and <code>POST</code>
	 * methods.
	 *
	 * @param request servlet request
	 * @param response servlet response
	 * @throws ServletException if a servlet-specific error occurs
	 * @throws IOException if an I/O error occurs
	 */
	protected void processRequest(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		try {

			LocalDateTime now = LocalDateTime.now();
			DateTimeFormatter fileFormatter = DateTimeFormatter.ofPattern("yyyyMMddHHmmss");
			String fileTimestamp = now.format(fileFormatter);

			response.setContentType("application/pdf");
			response.setHeader("Content-Disposition", "attachment;filename=schedule_" + fileTimestamp + ".pdf");

			DatabaseConnector db = new DatabaseConnector();
			ServletConfig cfg = getServletConfig();
			db.init(
					cfg.getInitParameter("jdbcClassName"),
					cfg.getInitParameter("jdbcDriverURL"),
					cfg.getInitParameter("dbHostName"),
					cfg.getInitParameter("dbPort"),
					cfg.getInitParameter("dbName"),
					cfg.getInitParameter("dbUsername"),
					cfg.getInitParameter("dbPassword")
			);
			
			// PDF Creation - Landscape
			Document doc = new Document(PageSize.LETTER.rotate());
			OutputStream out = response.getOutputStream();
			PdfWriter writer = PdfWriter.getInstance(doc, out);

			// Set header and footer with text from web.xml
			writer.setPageEvent(
					new PdfHeaderFooter(
							(String) request.getSession(false).getAttribute("user"),
							getServletContext().getInitParameter("pdfHeaderText"),
							getServletContext().getInitParameter("pdfFooterText")
					));
			
			// Title/header
			Font titleFont = FontFactory.getFont(FontFactory.COURIER_BOLD, 18);
			Paragraph docTitle = new Paragraph("SCHEDULE", titleFont);
			docTitle.setAlignment(Element.ALIGN_CENTER);
			docTitle.setSpacingAfter(20f);
			doc.add(docTitle);

			// --- actual content start
			float[] relativeColWidths = {5F, 4F, 5F};
			PdfPTable bodyTable = new PdfPTable(relativeColWidths);
			
			bodyTable.addCell("Course Name");
			bodyTable.addCell("Instructor");
			bodyTable.addCell("Schedule");
			
			ResultSet courses = db.runQuery("SELECT * FROM COURSEDB");
			
			while (courses.next()) {
				bodyTable.addCell(courses.getString("COURSE_NAME"));
				bodyTable.addCell(courses.getString("COURSE_INSTRUCTOR"));
				bodyTable.addCell(courses.getString("COURSE_SCHEDULE"));
			}
			
			doc.close();

		} catch (DocumentException e) {
			e.printStackTrace();

		} catch (SQLException e) {
			e.printStackTrace();
		}

	}

	// <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
	/**
	 * Handles the HTTP <code>GET</code> method.
	 *
	 * @param request servlet request
	 * @param response servlet response
	 * @throws ServletException if a servlet-specific error occurs
	 * @throws IOException if an I/O error occurs
	 */
	@Override
	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		processRequest(request, response);
	}

	/**
	 * Handles the HTTP <code>POST</code> method.
	 *
	 * @param request servlet request
	 * @param response servlet response
	 * @throws ServletException if a servlet-specific error occurs
	 * @throws IOException if an I/O error occurs
	 */
	@Override
	protected void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		processRequest(request, response);
	}

	/**
	 * Returns a short description of the servlet.
	 *
	 * @return a String containing servlet description
	 */
	@Override
	public String getServletInfo() {
		return "Short description";
	}// </editor-fold>

}
